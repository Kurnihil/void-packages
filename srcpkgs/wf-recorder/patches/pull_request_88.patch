--- config.h.in
+++ config.h.in
@@ -1,5 +1,6 @@
 #pragma once
 
 #define DEFAULT_CODEC "@default_codec@"
+#mesondefine HAVE_PULSE
 #mesondefine HAVE_OPENCL
 #mesondefine HAVE_LIBAVDEVICE
--- meson.build
+++ meson.build
@@ -21,11 +21,18 @@ include_directories(['.'])
 
 add_project_arguments(['-Wno-deprecated-declarations'], language: 'cpp')
 
-project_sources = ['src/frame-writer.cpp', 'src/main.cpp', 'src/pulse.cpp', 'src/averr.c']
+project_sources = ['src/frame-writer.cpp', 'src/main.cpp', 'src/averr.c']
 
 wayland_client = dependency('wayland-client')
 wayland_protos = dependency('wayland-protocols')
 
+pulse = dependency('libpulse-simple', required : get_option('pulse'))
+
+if pulse.found()
+    conf_data.set('HAVE_PULSE', true)
+    project_sources += 'src/pulse.cpp'
+endif
+
 opencl = dependency('OpenCL', required : get_option('opencl'))
 
 if opencl.found()
@@ -40,7 +47,6 @@ libavdevice = dependency('libavdevice', required: false)
 sws = dependency('libswscale')
 swr = dependency('libswresample')
 threads = dependency('threads')
-pulse = dependency('libpulse-simple')
 
 conf_data.set('HAVE_LIBAVDEVICE', libavdevice.found())
 
@@ -82,6 +88,7 @@ dependencies = [
     libavutil, libavcodec, libavformat, libavdevice,
     wf_protos, sws, threads, pulse, swr, opencl
 ]
+
 executable('wf-recorder', project_sources,
         dependencies: dependencies,
         install: true)
--- meson_options.txt
+++ meson_options.txt
@@ -1,3 +1,4 @@
 option('default_codec', type: 'string', value: 'libx264', description: 'Codec that will be used by default')
 option('man-pages', type: 'feature', value: 'auto', description: 'Generate and install man pages')
+option('pulse', type: 'feature', value: 'auto', description: 'Enable Pulseaudio')
 option('opencl', type: 'feature', value: 'auto', description: 'Enable OpenCL')
--- src/frame-writer.cpp
+++ src/frame-writer.cpp
@@ -202,7 +202,7 @@ void FrameWriter::init_video_stream()
     }
     av_dict_free(&options);
 }
-
+#ifdef HAVE_PULSE
 static uint64_t get_codec_channel_layout(AVCodec *codec)
 {
       int i = 0;
@@ -287,13 +287,14 @@ void FrameWriter::init_audio_stream()
         std::exit(-1);
     }
 }
-
+#endif
 void FrameWriter::init_codecs()
 {
     init_video_stream();
+#ifdef HAVE_PULSE
     if (params.enable_audio)
         init_audio_stream();
-
+#endif
     av_dump_format(fmtCtx, 0, params.file.c_str(), 1);
     if (avio_open(&fmtCtx->pb, params.file.c_str(), AVIO_FLAG_WRITE))
     {
@@ -517,7 +518,7 @@ void FrameWriter::add_frame(const uint8_t* pixels, int64_t usec, bool y_invert)
     if (saved_buf0)
         encoder_frame->buf[0] = saved_buf0;
 }
-
+#ifdef HAVE_PULSE
 #define SRC_RATE 1e6
 #define DST_RATE 1e3
 
@@ -576,7 +577,7 @@ void FrameWriter::add_audio(const void* buffer)
     av_frame_free(&inputf);
     av_frame_free(&outputf);
 }
-
+#endif
 void FrameWriter::finish_frame(AVCodecContext *enc_ctx, AVPacket& pkt)
 {
     static std::mutex fmt_mutex, pending_mutex;
@@ -585,7 +586,9 @@ void FrameWriter::finish_frame(AVCodecContext *enc_ctx, AVPacket& pkt)
     {
         av_packet_rescale_ts(&pkt, (AVRational){ 1, 1000000 }, videoStream->time_base);
         pkt.stream_index = videoStream->index;
-    } else
+    }
+#ifdef HAVE_PULSE
+    else
     {
         av_packet_rescale_ts(&pkt, (AVRational){ 1, 1000 }, audioStream->time_base);
         pkt.stream_index = audioStream->index;
@@ -600,12 +603,13 @@ void FrameWriter::finish_frame(AVCodecContext *enc_ctx, AVPacket& pkt)
         fmt_mutex.lock();
         pending_mutex.unlock();
     }
-
+#endif
     av_interleaved_write_frame(fmtCtx, &pkt);
     av_packet_unref(&pkt);
-
+#ifdef HAVE_PULSE
     if (params.enable_audio)
         fmt_mutex.unlock();
+#endif
 }
 
 FrameWriter::~FrameWriter()
@@ -615,12 +619,12 @@ FrameWriter::~FrameWriter()
     av_init_packet(&pkt);
 
     encode(videoCodecCtx, NULL, &pkt);
-
+#ifdef HAVE_PULSE
     if (params.enable_audio)
     {
         encode(audioCodecCtx, NULL, &pkt);
     }
-
+#endif
     // Writing the end of the file.
     av_write_trailer(fmtCtx);
 
@@ -633,9 +637,10 @@ FrameWriter::~FrameWriter()
     sws_freeContext(swsCtx);
 
     av_frame_free(&encoder_frame);
+#ifdef HAVE_PULSE
     if (params.enable_audio)
         avcodec_close(audioStream->codec);
-
+#endif
     // TODO: free all the hw accel
     avformat_free_context(fmtCtx);
 }
--- src/frame-writer.hpp
+++ src/frame-writer.hpp
@@ -103,23 +103,24 @@ class FrameWriter
 
     void encode(AVCodecContext *enc_ctx, AVFrame *frame, AVPacket *pkt);
 
+#ifdef HAVE_PULSE
     SwrContext *swrCtx;
     AVStream *audioStream;
     AVCodecContext *audioCodecCtx;
     void init_swr();
     void init_audio_stream();
     void send_audio_pkt(AVFrame *frame);
-
+#endif
     void finish_frame(AVCodecContext *enc_ctx, AVPacket& pkt);
 
 public :
     FrameWriter(const FrameWriterParams& params);
     void add_frame(const uint8_t* pixels, int64_t usec, bool y_invert);
-
+#ifdef HAVE_PULSE
     /* Buffer must have size get_audio_buffer_size() */
     void add_audio(const void* buffer);
     size_t get_audio_buffer_size();
-
+#endif
 #ifdef HAVE_OPENCL
     std::unique_ptr<OpenCL> opencl;
 #endif
--- src/main.cpp
+++ src/main.cpp
@@ -18,7 +18,9 @@
 #include <wayland-client-protocol.h>

 #include "frame-writer.hpp"
+#ifdef HAVE_PULSE
 #include "pulse.hpp"
+#endif
 #include "wlr-screencopy-unstable-v1-client-protocol.h"
 #include "xdg-output-unstable-v1-client-protocol.h"

@@ -28,6 +30,10 @@
 std::unique_ptr<OpenCL> opencl;
 #endif
 
+#ifdef HAVE_PULSE
+PulseReaderParams pulseParams;
+#endif
+
 std::mutex frame_writer_mutex, frame_writer_pending_mutex;
 std::unique_ptr<FrameWriter> frame_writer;
 
@@ -289,7 +293,7 @@ static InputFormat get_input_format(wf_buffer& buffer)
     std::exit(0);
 }
 
-static void write_loop(FrameWriterParams params, PulseReaderParams pulseParams)
+static void write_loop(FrameWriterParams params)
 {
     /* Ignore SIGINT, main loop is responsible for the exit_main_loop signal */
     sigset_t sigset;
@@ -298,7 +302,9 @@ static void write_loop(FrameWriterParams params, PulseReaderParams pulseParams)
     pthread_sigmask(SIG_BLOCK, &sigset, NULL);
 
     int last_encoded_frame = 0;
+#ifdef HAVE_PULSE
     std::unique_ptr<PulseReader> pr;
+#endif
 
     while(!exit_main_loop)
     {
@@ -328,12 +334,14 @@ static void write_loop(FrameWriterParams params, PulseReaderParams pulseParams)
             }
 #endif
 
+#ifdef HAVE_PULSE
             if (params.enable_audio)
             {
                 pulseParams.audio_frame_size = frame_writer->get_audio_buffer_size();
                 pr = std::unique_ptr<PulseReader> (new PulseReader(pulseParams));
                 pr->start();
             }
+#endif
         }
 
         frame_writer->add_frame((unsigned char*)buffer.data, buffer.base_usec,
@@ -350,7 +358,9 @@ static void write_loop(FrameWriterParams params, PulseReaderParams pulseParams)
     std::lock_guard<std::mutex> lock(frame_writer_mutex);
     /* Free the PulseReader connection first. This way it'd flush any remaining
      * frames to the FrameWriter */
+#ifdef HAVE_PULSE
     pr = nullptr;
+#endif
     frame_writer = nullptr;
 }
 
@@ -504,13 +514,17 @@ static void help()
     printf(R"(Usage: wf-recorder [OPTION]... -f [FILE]...
 Screen recording of wlroots-based compositors
 
-With no FILE, start recording the current screen.
+With no FILE, start recording the current screen.)");
+#ifdef HAVE_PULSE
+    printf(R"(
 
   -a, --audio [DEVICE]      Starts recording the screen with audio.
                             [DEVICE] argument is optional.
                             In case you want to specify the pulseaudio device which will capture
                             the audio, you can run this command with the name of that device.
-                            You can find your device by running: pactl list sinks | grep Name
+                            You can find your device by running: pactl list sinks | grep Name)");
+#endif
+    printf(R"(
 
   -c, --codec               Specifies the codec of the video. Supports  GIF output also.
                             To modify codec parameters, use -p <option_name>=<option_value>
@@ -556,9 +570,13 @@ With no FILE, start recording the current screen.
 
   -b, --bframes             This option is used to set the maximum number of b-frames to be used.
                             If b-frames are not supported by your hardware, set this to 0.)" "\n\n" R"(
-Examples:
+Examples:)");
+#ifdef HAVE_PULSE
+    printf(R"(
 
-  Video Only:
+  Video Only:)");
+#endif
+    printf(R"(
 
   - wf-recorder                         Records the video. Use Ctrl+C to stop recording.
                                         The video file will be stored as recording.mp4 in the
@@ -566,7 +584,9 @@ With no FILE, start recording the current screen.
 
   - wf-recorder -f <filename>.ext       Records the video. Use Ctrl+C to stop recording.
                                         The video file will be stored as <outputname>.ext in the
-                                        current working directory.
+                                        current working directory.)");
+#ifdef HAVE_PULSE
+    printf(R"(
 
   Video and Audio:
 
@@ -576,7 +596,9 @@ With no FILE, start recording the current screen.
 
   - wf-recorder -a -f <filename>.ext    Records the audio. Use Ctrl+C to stop recording.
                                         The video file will be stored as <outputname>.ext in the
-                                        current working directory.
+                                        current working directory.)");
+#endif
+    printf(R"(
 
 )" "\n");
     exit(EXIT_SUCCESS);
@@ -594,8 +616,6 @@ int main(int argc, char *argv[])
     params.opencl_device = -1;
     params.bframes = -1;
 
-    PulseReaderParams pulseParams;
-
     constexpr const char* default_cmdline_output = "interactive";
     std::string cmdline_output = default_cmdline_output;
 
@@ -663,8 +683,10 @@ int main(int argc, char *argv[])
                 break;
 
             case 'a':
+#ifdef HAVE_PULSE
                 params.enable_audio = true;
                 pulseParams.audio_source = optarg ? strdup(optarg) : NULL;
+#endif
                 break;
 
             case 't':
@@ -829,7 +851,7 @@ int main(int argc, char *argv[])
         if (!spawned_thread)
         {
             writer_thread = std::thread([=] () {
-                write_loop(params, pulseParams);
+                write_loop(params);
             });
 
             spawned_thread = true;
